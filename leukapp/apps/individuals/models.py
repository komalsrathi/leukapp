# -*- coding: utf-8 -*-

"""
Models and database schemas for the :mod:`~leukapp.apps.individuals`
application.

See `Django's Model Documentation`_ for more information.

.. _Django's Model Documentation:
    https://docs.djangoproject.com/en/1.9/topics/db/models/
"""

# django
from django.db import models
from django.utils.translation import ugettext_lazy as _

# leukapp
from leukapp.apps.core.models import LeukappModel
from leukapp.apps.core.validators import ext_id_validator

# local
from . import constants


class Individual(LeukappModel):

    """
    Top class in the **Leukgen's** samples ecosystem, it usually refers to
    patients, mice and other kind of organisms.
    """

    #: Name of the application where :class:`Individual` is contained.
    APP_NAME = constants.APP_NAME

    # EXTERNAL FIELDS
    # =========================================================================
    institution = models.CharField(
        verbose_name=_("institution"),
        choices=constants.INDIVIDUAL_CHOICES["INSTITUTION"],
        max_length=100,
        null=True,
        )
    """
    Indicates whether the :class:`Indiviual` comes from MSK or not.
    See the available choices: :class:`~constants.INSTITUTION`.
    """

    species = models.CharField(
        verbose_name=_("species"),
        choices=constants.INDIVIDUAL_CHOICES["SPECIES"],
        max_length=100,
        null=True,
        )
    """
    Indicates the :class:`Indiviual` species.
    See the available choices: :class:`~constants.SPECIES`.
    """

    ext_id = models.CharField(
        verbose_name=_("external id"),
        validators=[ext_id_validator],
        max_length=100,
        null=True,
        help_text=_(
            "The external id should be unique at the Institution and Species "
            "levels. MRNs are not allowed for Individuals coming from MSK. "
            "Please use a pseudo MRN or other type of identifier."
            ),
        )
    """
    Id used by the scientist to track the :class:`Indiviual`.

    This field is validated using the
    :obj:`~leukapp.apps.core.validators.ext_id_validator`.

    .. warning::
        **MRNs** are not allowed for **HUMANS** from **MSK**. Please use a
        pseudo MRN or other type of identifier.
    """

    # INTERNAL FIELDS
    # =========================================================================
    tumors_count = models.PositiveSmallIntegerField(
        verbose_name=_("number of tumor specimens created"),
        default=0,
        editable=False,
        null=True,
        )
    """
    """

    normals_count = models.PositiveSmallIntegerField(
        verbose_name=_("number of normal specimens created"),
        default=0,
        editable=False,
        null=True,
        )
    """
    """

    int_id = models.CharField(
        verbose_name=_("internal id"),
        max_length=100,
        editable=False,
        null=True,
        )
    """
    Internal ID used to describe the :class:`Individual` instance.

    This value is generated by :meth:`_get_int_id` and it includes crucial
    information separated by a "-" character (e.g. ``E-100000-H``).

    * ``E`` indicates that the current :class:`Individual` comes from an
      **external** institution different than **MSK**.
    * ``100000`` indicates the :class:`Indiviual` primary key in the
      :mod:`leukapp` system.
    * ``H`` indicates the species of the :class:`Indiviual` following the
      character assignment described in :data:`~.constants.LEUKID_SPECIES`

    .. important:
        The :attr:`int_id` is generated only once. If there was a mistake a new
        :class:`Indiviual` instance must be created.
    """

    slug = models.SlugField(
        verbose_name=_("slug"),
        unique=True,
        editable=False,
        null=True,
        )
    """
    :class:`Individual's <.Individual>` unique identifier (**leukid**).

    .. important:
        For the :class:`Indiviual` model, the :attr:`int_id` and :attr:`slug`
        are the same. However, this does not apply for the children classes
        :class:`~leukapp.apps.specimens.models.Specimen`,
        :class:`~leukapp.apps.aliquots.models.Aliquot`, and
        :class:`~leukapp.apps.extractions.models.Extraction`.
    """

    # META CLASS
    # =========================================================================
    class Meta:
        verbose_name = _(constants.APP_NAME[:-1])
        verbose_name_plural = _(constants.APP_NAME)
        unique_together = (constants.INDIVIDUAL_UNIQUE_TOGETHER)
        index_together = (constants.INDIVIDUAL_UNIQUE_TOGETHER)

    # PUBLIC METHODS
    # =========================================================================
    def __str__(self):
        """
        Returns the :attr:`slug` when ``str`` is requested.
        """
        return self.slug

    def check_institution(self):
        """
        Determines whether or not the :class:`Individual` comes from MSK.
        """
        if self.institution == constants.MSK:
            return 'I'
        else:
            return 'E'

    # PRIVATE METHODS
    # =========================================================================
    def _if_new(self, **kwargs):
        """ .. currentmodule:: leukapp.apps.core
        Executed only when the object is created.

        .. note:
            This method can only be called from
            :meth:`~models.LeukappModel.save` and is protected by
            :meth:`~models.LeukappModel._check_if_caller_is_save`.
        """
        self._check_if_caller_is_save()
        self._get_int_id()
        self.slug = self.int_id

    def _if_save(self):
        """ .. currentmodule:: leukapp.apps.core
        Executed everytime the object is saved.

        .. note:
            This method can only be called from
            :meth:`~models.LeukappModel.save` and is protected by
            :meth:`~models.LeukappModel._check_if_caller_is_save`.
        """
        self._check_if_caller_is_save()

    def _get_int_id(self):
        """
        Computes the :attr:`int_id`.

        Steps:

            * Check if the caller function is :meth:`_if_new()`.
            * Retrieve the ID character assigned to the ``species`` field.

        .. note:
            This method can only be called from
            :meth:`_if_new` and is protected by
            :meth:`~leukapp.apps.core.models.LeukappModel._check_if_caller_is_if_new`.
        """
        self._check_if_caller_is_if_new()

        species_id = constants.LEUKID_SPECIES[self.species]
        institution_id = self.check_institution()
        to_join = [institution_id, species_id, str(self.pk)]
        self.int_id = "-".join(to_join)
        return self.int_id
