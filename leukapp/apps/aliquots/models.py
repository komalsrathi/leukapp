# -*- coding: utf-8 -*-

"""
Models and database schemas for the :mod:`~leukapp.apps.aliquots` application.

See `Django's Model Documentation`_ for more information.

.. _Django's Model Documentation:
    https://docs.djangoproject.com/en/1.9/topics/db/models/
"""

# django imports
from django.db import models
from django.utils.translation import ugettext_lazy as _

# apps imports
from leukapp.apps.core.models import LeukappModel
from leukapp.apps.core.validators import ext_id_validator
from leukapp.apps.specimens.models import Specimen

# local imports
from . import constants


class Aliquot(LeukappModel):

    """
    :class:`Specimen's <leukapp.apps.aliquots.models.Specimen>` sub-collections
    stored in separated tubes.
    """

    #: Name of the application where :class:`Aliquot` is contained.
    APP_NAME = constants.APP_NAME

    # EXTERNAL FIELDS
    # =========================================================================
    specimen = models.ForeignKey(
        Specimen,
        verbose_name=_("specimen"),
        null=True,
        )
    """
    `ForeignKey`_ to the :class:`~leukapp.apps.specimens.models.Specimen`
    model.

    .. _ForeignKey: https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_one/#many-to-one-relationships
    """

    ext_id = models.CharField(
        verbose_name=_("external id"),
        max_length=100,
        validators=[ext_id_validator],
        help_text=_("The external id should be unique at the Specimen level."),
        null=True,
        )
    """
    ID used by the ``Institution`` or ``Scientist`` to track the
    :class:`.Aliquot`.

    The default value is :data:`~leukapp.apps.core.constants.UNKNOWN`
    because it's likely that scientist don't know this ID.

    .. important: Only one ``UNKNOWN`` :class:`Aliquot` is allowed.
    """

    # INTERNAL FIELDS
    # =========================================================================
    dna_extractions_count = models.PositiveSmallIntegerField(
        verbose_name=_("number of extractions created"),
        default=0,
        editable=False,
        null=True,
        )
    rna_extractions_count = models.PositiveSmallIntegerField(
        verbose_name=_("number of extractions created"),
        default=0,
        editable=False,
        null=True,
        )

    int_id = models.CharField(
        verbose_name=_("internal id"),
        max_length=100,
        editable=False,
        null=True,
        )
    """
    Internal ID used to describe the :class:`Aliquot` instance.

    This value is generated by :meth:`_get_int_id` and it includes crucial
    information (e.g. ``1``).

    * ``1`` indicates that the current :class:`Aliquot` is the first
      **tube** used for the from the parent class
      :class:`~leukapp.apps.specimens.models.Specimen`.

    .. important:
        The :attr:`int_id` is generated only once. If there was a mistake a new
        :class:`Aliquot` instance must be created.
    """

    slug = models.SlugField(
        verbose_name=_("slug"),
        unique=True,
        editable=False,
        null=True,
        )
    """
    :class:`Aliquot's <.Aliquot>` unique identifier (**leukid**).

    The :attr:`int_id` is added to the ``Specimen.slug`` to generate the
    Aliquot's :attr:`slug`.

    .. important:
        As the :attr:`int_id`, the :attr:`slug` is generated only once. If
        there was a mistake a new :class:`Aliquot` instance must be created.
    """

    # META CLASS
    # =========================================================================
    class Meta:
        verbose_name = _(constants.APP_NAME[:-1])
        verbose_name_plural = _(constants.APP_NAME)
        unique_together = (constants.ALIQUOT_UNIQUE_TOGETHER)
        index_together = (constants.ALIQUOT_UNIQUE_TOGETHER)

    # PUBLIC METHODS
    # =========================================================================
    def __str__(self):
        """
        Returns the :attr:`slug` when ``str`` is requested.
        """
        return self.slug

    # PRIVATE METHODS
    # =========================================================================
    def _if_new(self, **kwargs):
        """ .. currentmodule:: leukapp.apps.core
        Executed only when the object is created.

        .. note:
            This method can only be called from
            :meth:`~models.LeukappModel.save` and is protected by
            :meth:`~models.LeukappModel._check_if_caller_is_save`.
        """
        self._check_if_caller_is_save()
        self._get_int_id()
        self.slug = '-'.join([self.specimen.slug, self.int_id])

    def _if_save(self):
        """ .. currentmodule:: leukapp.apps.core
        Executed everytime the object is saved.

        .. note:
            This method can only be called from
            :meth:`~models.LeukappModel.save` and is protected by
            :meth:`~models.LeukappModel._check_if_caller_is_save`.
        """
        self._check_if_caller_is_save()

    def _get_int_id(self):
        """
        Computes the :attr:`int_id`.

        The :attr:`int_id` generation is based on a count of ``Aliquots`` per
        :class:`~leukapp.apps.specimens.models.Specimen`.

        Steps:

            * Check if the caller function is :meth:`_if_new()`.
            * Updates the ``aliquots`` count per ``Specimen`` and saves the
              Parent class.

        .. note:
            This method can only be called from
            :meth:`_if_new` and is protected by
            :meth:`~leukapp.apps.core.models.LeukappModel._check_if_caller_is_if_new`.
        """
        self._check_if_caller_is_if_new()

        self.specimen.aliquots_count += 1
        self.int_id = str(self.specimen.aliquots_count)
        self.specimen.save()
        return self.int_id
