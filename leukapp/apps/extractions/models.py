# -*- coding: utf-8 -*-

"""
Models and database schemas for the :mod:`~leukapp.apps.extractions`
application.
"""

# django
from django.db import models
from django.utils.translation import ugettext_lazy as _

# leukapp
from leukapp.apps.core.models import LeukappModel
from leukapp.apps.core.validators import ext_id_validator
from leukapp.apps.core.db import CharNullField
from leukapp.apps.core.constants import UNKNOWN
from leukapp.apps.aliquots.models import Aliquot
from leukapp.apps.projects.models import Project

# local
from . import constants
from .validators import projects_string_validator


class Extraction(LeukappModel):

    """
    :class:`Aliquot's <leukapp.apps.aliquots.models.Aliquot>` nucleic acid.

    Each :class:`.Extraction` can be linked to multiple
    :mod:`Projects <leukapp.apps.projects.models.Project>` using the
    :attr:`projects` ManyToMany field. Additionally, the attribute
    :attr:`projects_string` can also be used with
    :meth:`_get_projects_from_string` to link projects and extractions::

        # This will add projects 101 and 102 to Extraction when saving
        projects_string = '101|102|103'
    """

    #: Name of the application where :class:`Extraction` is contained.
    APP_NAME = constants.APP_NAME

    # EXTERNAL FIELDS
    # =========================================================================
    aliquot = models.ForeignKey(
        Aliquot,
        verbose_name=_("aliquot"),
        null=True,
        )
    """
    `ForeignKey`_ to the :class:`~leukapp.apps.aliquots.models.Aliquot` model.

    .. _ForeignKey: https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_one/#many-to-one-relationships
    """

    analyte = models.CharField(
        verbose_name=_("biological material"),
        max_length=100,
        choices=constants.EXTRACTION_CHOICES["ANALYTE"],
        null=True,
        )
    """
    Type of nucleic acid to be sequenced. See :data:`~.constants.ANALYTE` for
    available choices.
    """

    projects = models.ManyToManyField(
        Project,
        verbose_name=_("projects"),
        blank=True,
        )
    """
    Many to many relationship with the model
    :class:`~leukapp.apps.projects.models.Project`.
    """

    projects_string = models.CharField(
        verbose_name=_("list of projetcs"),
        max_length=100,
        validators=[projects_string_validator],
        help_text=_("Include the projects pks separated by a '|' character"),
        blank=True,
        null=True,
        )
    """
    String used by :meth:`_get_projects_from_string` to link
    :class:`Projects <leukapp.apps.projects.models.Project>` and
    :class:`Extractions <.Extraction>`.
    """

    technology = models.CharField(
        verbose_name=_("technology"),
        choices=constants.EXTRACTION_CHOICES["TECHNOLOGY"],
        max_length=100,
        null=True,
        )
    """
    Sequencing :data:`~.constants.TECHNOLOGY`.
    """

    platform = models.CharField(
        verbose_name=_("platform"),
        choices=constants.EXTRACTION_CHOICES["PLATFORM"],
        default=UNKNOWN,
        max_length=100,
        null=True,
        )
    """
    Sequencing :data:`~.constants.PLATFORM`.
    """

    center = models.CharField(
        verbose_name=_("sequencing center"),
        max_length=100,
        choices=constants.EXTRACTION_CHOICES["CENTER"],
        null=True,
        )
    """
    Sequencing :data:`~.constants.CENTER`.
    """

    ext_id = CharNullField(
        verbose_name=_("sequencing center ID"),
        max_length=100,
        validators=[ext_id_validator],
        default=UNKNOWN,
        help_text=_("The sequencing center ID."),
        blank=True,
        null=True,
        )
    """
    ID used by the sequencing :data:`~.constants.CENTER` to identify the
    :class:`.Extraction`.

    The default value is :data:`~leukapp.apps.core.constants.UNKNOWN`
    because most likely, scientist don't know this ID when they are submitting
    :class:`Extractions <.Extraction>` to **leukgen**.

    .. important:
        This field is a :class:`~leukapp.apps.core.db.CharNullField`. This
        particular field class enables the ability to have multiple NULL
        values but unique non-NULL records.
    """

    # INTERNAL FIELDS
    # =========================================================================
    int_id = models.CharField(
        verbose_name=_("internal ID"),
        max_length=100,
        editable=False,
        null=True,
        )
    """
    Internal ID used to describe the :class:`Extraction` object.

    This value is generated by :meth:`_get_int_id` and it includes crucial
    information separated by a ``-`` character (e.g. ``D1-1``).

    * ``D1`` indicates that the current :class:`Extraction` is the first
      **DNA** extracted from an :class:`~leukapp.apps.aliquots.models.Aliquot`.

    * ``1`` indicates the :data:`~.constants.TECHNOLOGY_PLATFORM` code.

    The :attr:`int_id` is generated only once. If there was a mistake a new
    :class:`Extraction` instance must be created.
    """

    slug = models.SlugField(
        verbose_name=_("slug"),
        unique=True,
        editable=False,
        null=True,
        )
    """
    :class:`Extraction's <.Extraction>` unique identifier (**leukid**).

    The :attr:`int_id` is added to the ``Aliquot.slug`` to generate the
    :attr:`slug`.

    As the :attr:`int_id`, the :attr:`slug` is generated only once.
    If there was a mistake a new :class:`Extraction` instance must be created.
    """

    # META CLASS
    # =========================================================================
    class Meta:
        verbose_name = _(constants.APP_NAME[:-1])
        verbose_name_plural = _(constants.APP_NAME)
        unique_together = (constants.EXTRACTION_UNIQUE_TOGETHER)
        index_together = (constants.EXTRACTION_UNIQUE_TOGETHER)

    # PUBLIC METHODS
    # =========================================================================
    def __str__(self):
        """
        Returns the :attr:`slug` when ``str`` is requested.
        """
        return self.slug

    # PRIVATE METHODS
    # =========================================================================
    def _if_new(self, **kwargs):
        """ .. currentmodule:: leukapp.apps.core
        Executed only when the object is created.

        This method can only be called from
        :meth:`~models.LeukappModel.save` and is protected by
        :meth:`~models.LeukappModel._check_if_caller_is_save`.
        """
        self._check_if_caller_is_save()
        self._get_int_id()
        self.slug = '-'.join([self.aliquot.slug, self.int_id])

    def _if_save(self):
        """ .. currentmodule:: leukapp.apps.core
        Executed everytime the object is saved.

        This method can only be called from
        :meth:`~models.LeukappModel.save` and is protected by
        :meth:`~models.LeukappModel._check_if_caller_is_save`.
        """
        self._check_if_caller_is_save()
        self._get_projects_from_string()

    def _get_projects_from_string(self):
        """
        Links :class:`Extractions <.Extraction>` to
        :class:`Projects <leukapp.apps.projects.models.Project>`` using
        :attr:`projects_string`.

        Projects primary keys (`pk`s) must be separated by a ``|`` character.
        """
        try:
            projects = [int(p) for p in self.projects_string.split("|")]
            [self.projects.add(p) for p in projects]
        except Exception:
            pass

    def _get_int_id(self):
        """
        Computes the :attr:`int_id`.

        The :attr:`int_id` generation is based on a count of Extractions per
        :class:`~leukapp.apps.aliquots.models.Aliquot`, and the combination of
        the sequencing :data:`~.constants.TECHNOLOGY` and
        :data:`~.constants.PLATFORM` used.

        Steps:

            * Check if the caller function is :meth:`_if_new()`.
            * if ``platform`` is ``UNKNOWN``, replace for default value.
            * Retrieve the ID character assigned to the `analyte` attribute.
              updates the extractions count, saves the Parent class,
              and builds the first section of the ID (e.g. ``D1``).
            * Assigns the :data:`~.constants.TECHNOLOGY_PLATFORM` code to the
              last section of the ID (e.g. ``D1-1``).

        This method can only be called from
        :meth:`_if_new` and is protected by
        :meth:`~leukapp.apps.core.models.LeukappModel._check_if_caller_is_if_new`.
        """
        self._check_if_caller_is_if_new()

        # set default value to platform incase it wasn't provided
        if (not self.platform) or (self.platform == UNKNOWN):
            default = constants.TECHNOLOGY_PLATFORM[self.technology]["DEFAULT"]
            self.platform = default

        # D1 leukid section
        if self.analyte == constants.DNA:
            self.aliquot.dna_extractions_count += 1
            self.int_id = constants.LEUKID_ANALYTE[self.analyte]
            self.int_id += str(self.aliquot.dna_extractions_count)
        elif self.analyte == constants.RNA:
            self.aliquot.rna_extractions_count += 1
            self.int_id = constants.LEUKID_ANALYTE[self.analyte]
            self.int_id += str(self.aliquot.rna_extractions_count)
        self.aliquot.save()

        # D1-1 leukid section
        code = constants.TECHNOLOGY_PLATFORM[self.technology][self.platform]
        self.int_id += '-' + code

        return self.int_id
