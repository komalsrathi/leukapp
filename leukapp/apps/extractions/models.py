
"""
Models for the :mod:`~leukapp.apps.extractions` application.

See `Django's Model Documentation`_ for more information.

.. _Django's Model Documentation:
    https://docs.djangoproject.com/en/1.9/topics/db/models/
"""

# django
from django.db import models
from django.utils.translation import ugettext_lazy as _

# leukapp
from leukapp.apps.core.models import LeukappModel
from leukapp.apps.core.validators import ext_id_validator
from leukapp.apps.core.constants import UNKNOWN
from leukapp.apps.aliquots.models import Aliquot

# local
from . import constants


class Extraction(LeukappModel):

    """Nucleic acid from :class:`~leukapp.apps.aliquots.models.Aliquot>`."""

    #: Name of the application where :class:`Extraction` is contained.
    APP_NAME = constants.APP_NAME

    # EXTERNAL FIELDS
    # =========================================================================

    aliquot = models.ForeignKey(
        Aliquot,
        verbose_name=_("aliquot"),
        )
    """
    `ForeignKey`_ to the :class:`~leukapp.apps.aliquots.models.Aliquot` model.

    .. _ForeignKey: https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_one/#many-to-one-relationships
    """

    ext_id = models.CharField(
        verbose_name=_("sequencing center ID"),
        validators=[ext_id_validator],
        max_length=100,
        blank=True,
        default=UNKNOWN,
        help_text=_("The sequencing center ID."),
        )
    """
    ID used by the scientist or :data:`Sequencing Center <.constants.CENTER>` to
    track the :class:`.Extraction`. The default value is
    :data:`~leukapp.apps.core.constants.UNKNOWN`.
    """

    analyte = models.CharField(
        verbose_name=_("biological material"),
        max_length=100,
        choices=constants.EXTRACTION_CHOICES["ANALYTE"],
        null=True,
        )
    """
    Type of nucleic acid to be sequenced. See :data:`~.constants.ANALYTE` for
    available choices.
    """

    # INTERNAL FIELDS
    # =========================================================================
    workflows_count = models.PositiveSmallIntegerField(
        verbose_name=_("number of extractions created"),
        default=0,
        editable=False,
        null=True,
        )
    """
    Count of :class:`Workflows <leukapp.apps.workflows.models.Workflow>`
    associated with the ``Extraction``.
    """

    int_id = models.CharField(
        verbose_name=_("internal ID"),
        max_length=100,
        editable=False,
        null=True,
        )
    """
    Internal ID used to describe the :class:`Extraction` object.

    This value is generated by :meth:`_get_int_id` and it includes the position
    ``[6]`` of the **leukid** (e.g. ``D1``):

    1.  ``D1`` indicates that the current :class:`Extraction` is the first
        **DNA** extracted from an
        :class:`~leukapp.apps.aliquots.models.Aliquot`.

    .. important::
        The :attr:`int_id` is generated only once. If there was a mistake a new
        :class:`Extraction` instance must be created.
    """

    slug = models.SlugField(
        verbose_name=_("slug"),
        unique=True,
        editable=False,
        null=True,
        )
    """
    :class:`Extraction's <.Extraction>` unique identifier (**leukid**).

    The :attr:`int_id` is added to the ``Aliquot.slug`` to generate the
    :attr:`slug`.

    .. important::
        As the :attr:`int_id`, the :attr:`slug` is generated only once. If
        there was a mistake a new :class:`Extraction` instance must be created.
    """

    # META CLASS
    # =========================================================================
    class Meta:
        verbose_name = _(constants.APP_NAME[:-1])
        verbose_name_plural = _(constants.APP_NAME)
        unique_together = (constants.EXTRACTION_UNIQUE_TOGETHER)
        index_together = (constants.EXTRACTION_UNIQUE_TOGETHER)

    # PUBLIC METHODS
    # =========================================================================
    def __str__(self):
        """Return the :attr:`slug` when ``str`` is requested."""
        return self.slug

    # PRIVATE METHODS
    # =========================================================================
    def _if_new(self, **kwargs):
        """
        Executed only when the object is created.

        .. currentmodule::
            leukapp.apps.core
        .. note::
            This method can only be called from
            :meth:`~models.LeukappModel.save` and is protected by
            :meth:`~models.LeukappModel._check_if_caller_is_save`.
        """
        self._check_if_caller_is_save()
        self._get_int_id()
        self.slug = '-'.join([self.aliquot.slug, self.int_id])

    def _if_save(self):
        """
        Executed everytime the object is saved.

        .. currentmodule::
            leukapp.apps.core
        .. note::
            This method can only be called from
            :meth:`~models.LeukappModel.save` and is protected by
            :meth:`~models.LeukappModel._check_if_caller_is_save`.
        """
        self._check_if_caller_is_save()

        # when blank is submitted, save UNKNOWN instead
        if self.ext_id == '':
            self.ext_id = UNKNOWN

    def _get_int_id(self):
        """
        Construct the :attr:`int_id`.

        The :attr:`int_id` generation is based on a count of ``Extractions``
        per :class:`~leukapp.apps.aliquots.models.Aliquot`.

        Steps:

            * Check if the caller function is :meth:`~Extraction._if_new`.
            * Retrieve the ID character assigned to the ``analyte`` attribute.
              updates the extractions count, saves the Parent class,
              and builds the first section of the ID (e.g. ``D1``).

        .. note::
            This method can only be called from
            :meth:`~Extraction._if_new` and is protected by
            :meth:`~leukapp.apps.core.models.LeukappModel._check_if_caller_is_if_new`.
        """
        self._check_if_caller_is_if_new()

        if self.analyte == constants.DNA:
            self.aliquot.dna_extractions_count += 1
            self.int_id = constants.INT_ID_ANALYTE[self.analyte]
            self.int_id += str(self.aliquot.dna_extractions_count)
        elif self.analyte == constants.RNA:
            self.aliquot.rna_extractions_count += 1
            self.int_id = constants.INT_ID_ANALYTE[self.analyte]
            self.int_id += str(self.aliquot.rna_extractions_count)
        self.aliquot.save()

        return self.int_id
