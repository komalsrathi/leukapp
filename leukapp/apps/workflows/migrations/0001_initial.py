# -*- coding: utf-8 -*-
# Generated by Django 1.9b1 on 2015-12-03 00:00
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import leukapp.apps.core.db
import leukapp.apps.workflows.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('extractions', '0010_extraction_workflows_count'),
        ('projects', '0002_auto_20151123_1252'),
    ]

    operations = [
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('ext_id', leukapp.apps.core.db.CharNullField(blank=True, default='UNKNOWN', help_text='The sequencing center ID.', max_length=100, null=True, validators=[django.core.validators.RegexValidator(code='invalid', message="Enter a valid 'External id' consisting of letters, numbers, underscores or hyphens.", regex='^[-a-zA-Z0-9_.]+\\Z')], verbose_name='sequencing center ID')),
                ('projects_string', models.CharField(blank=True, help_text="Include the projects keys separated by a '-' character", max_length=100, null=True, validators=[leukapp.apps.workflows.validators.projects_string_validator], verbose_name='list of projetcs')),
                ('sequencing_center', models.CharField(choices=[('CMO', 'CMO'), ('NYGC', 'NYGC'), ('FOUNDATION', 'FOUNDATION'), ('ILLUMINA', 'ILLUMINA'), ('SANGER', 'SANGER'), ('OTHER', 'OTHER')], max_length=100, null=True, verbose_name='sequencing center')),
                ('sequencing_technology', models.CharField(choices=[('WHOLE-EXOME', 'WHOLE-EXOME'), ('WHOLE-GENOME', 'WHOLE-GENOME'), ('TARGETED-DNA', 'TARGETED-DNA'), ('RNA-SEQ', 'RNA-SEQ'), ('RNA-SEQ-CUSTOM', 'RNA-SEQ-CUSTOM'), ('RNA-SEQ-SINGLE-CELL', 'RNA-SEQ-SINGLE-CELL'), ('CHIP-SEQ', 'CHIP-SEQ'), ('ATAC-SEQ', 'ATAC-SEQ'), ('FOUNDATION', 'FOUNDATION')], max_length=100, null=True, verbose_name='sequencing technology')),
                ('technology_type', models.CharField(choices=[('DEFAULT', 'DEFAULT'), ('AGILENT-50MB', 'AGILENT-50MB'), ('AGILENT-51MB', 'AGILENT-51MB'), ('FULLTRANSCRIPT', 'FULLTRANSCRIPT'), ("3'END", "3'END"), ('HEMEPACT-V1', 'HEMEPACT-V1'), ('HEMEPACT-V2', 'HEMEPACT-V2'), ('HEMEPACT-V3', 'HEMEPACT-V3'), ('IMPACT-HEME', 'IMPACT-HEME'), ('IMPACT-300', 'IMPACT-300'), ('IMPACT-340', 'IMPACT-340'), ('IMPACT-CLINICAL', 'IMPACT-CLINICAL'), ('H3K4ME1', 'H3K4ME1'), ('H3K4ME3', 'H3K4ME3'), ('H3K4ME2', 'H3K4ME2'), ('H3K27AC', 'H3K27AC'), ('FOUNDATIONON-HEME-PANEL', 'FOUNDATIONON-HEME-PANEL'), ('FOUNDATIONON-PANEL', 'FOUNDATIONON-PANEL')], default='DEFAULT', max_length=100, null=True, verbose_name='sequencing technology type')),
                ('sequencing_platform', models.CharField(choices=[('ILLUMINA-HISEQ-2000', 'ILLUMINA-HISEQ-2000'), ('ILLUMINA-HISEQ-2500', 'ILLUMINA-HISEQ-2500'), ('ILLUMINA-MISEQ', 'ILLUMINA-MISEQ'), ('ILLUMINA-X10', 'ILLUMINA-X10'), ('ILLUMINA-X5', 'ILLUMINA-X5'), ('PACBIO-RSII', 'PACBIO-RSII'), ('ION-TORRENT-PROTON', 'ION-TORRENT-PROTON'), ('ION-TORRENT-PGM', 'ION-TORRENT-PGM')], max_length=100, null=True, verbose_name='sequencing platform')),
                ('read_length', models.CharField(choices=[('50', '50'), ('100', '100'), ('125', '125'), ('150', '150'), ('200', '200'), ('225', '225'), ('250', '250'), ('OTHER', 'OTHER')], max_length=100, null=True, verbose_name='read length')),
                ('read_type', models.CharField(choices=[('SINGLE-END', 'SINGLE-END'), ('PAIR-END', 'PAIR-END')], max_length=100, null=True, verbose_name='read type')),
                ('int_id', models.CharField(editable=False, max_length=100, null=True, verbose_name='internal ID')),
                ('slug', models.SlugField(editable=False, null=True, unique=True, verbose_name='slug')),
                ('extraction', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='extractions.Extraction', verbose_name='extraction')),
                ('projects', models.ManyToManyField(blank=True, to='projects.Project', verbose_name='projects')),
            ],
            options={
                'verbose_name_plural': 'workflows',
                'verbose_name': 'workflow',
            },
        ),
        migrations.AlterUniqueTogether(
            name='workflow',
            unique_together=set([('extraction', 'sequencing_center', 'ext_id')]),
        ),
        migrations.AlterIndexTogether(
            name='workflow',
            index_together=set([('extraction', 'sequencing_center', 'ext_id')]),
        ),
    ]
